"""Console script for pyclone."""

import re
import os
import sys
import platform
import subprocess
import sysconfig

PLATFORM = platform.uname().system
package = 'src'
site_packages = sysconfig.get_path("purelib")  # type: Optional[str]
RCLONE_DIR_PATH = os.path.join(site_packages, package, 'rclone/')
PREFIX = ''
cwd = RCLONE_DIR_PATH
shell = True
if PLATFORM != 'Windows':
    shell = False
    PREFIX = './'
RCLONE = [PREFIX + 'rclone']

pattern = r"(Rclone.+?\n.+?\n\n.+?\n.+walkthroughs.)"
sub_pattern = """Pyclone is wrapper for Rclone that syncs files to and from cloud storage providers as well as \nmounting them, listing them in lots of different ways.\n\nSee the home page (https://github.com/Mwimwii/pyclone) for installation, usage, documentation,\nchangelog and configuration walkthroughs."""

# I have no idea, I hate autogenerated code templates


def main(args=None):
    return 0

# For the console script 'pyclone'


def execute_from_commandline():
    # print(RCLONE_DIR_PATH)
    # print(os.listdir('rclone'))
    print(os.listdir(RCLONE_DIR_PATH))
    cmd = RCLONE + sys.argv[1:]
    if ('config' in cmd) and (len(cmd) == 2):
        pipe = subprocess.run(cmd, cwd=RCLONE_DIR_PATH, shell=shell)
    else:
        pipe = subprocess.run(cmd, capture_output=True,
                              text=True, cwd=RCLONE_DIR_PATH, shell=shell)
        output = pipe.stdout if pipe.stdout else pipe.stderr
        print(rcloneToPyCli(output))


# Change the rclone to pyclone
def rcloneToPyCli(output):
    output = (re.sub('rclone ', 'pyclone ', output))
    return (re.sub(pattern, sub_pattern, output))


if __name__ == '__main__':
    # What is this
    sys.exit(main())
